"""Metadata for Argo CRDs."""

from typing import Any, Dict, Mapping, Optional


class Metadata:
    """Metadata that may be provided for an Argo CRD."""

    def __init__(
        self,
        name: str,
        generate_name_from_prefix: bool = False,
        namespace: Optional[str] = None,
        annotations: Mapping[str, str] = None,
        labels: Mapping[str, str] = None,
    ):
        """
        Initialize an object's Kubernetes metadata.

        Parameters
        ----------
        name: str
            The name of the object

        generate_name_from_prefix: bool, optional
            Whether or not the supplied name should be used as a prefix of the actual name (which would be autogenerated).

        namespace: str, optional
            The namespace where the object should exist.

        annotations: Mapping[str, str], default={}
            A mapping of annotation keys and values to attach to the object.

        labels: Mapping[str, str], default={}
            A mapping of label keys and values to attach to the object.
        """
        self._name = name
        self._generate_name_from_prefix = generate_name_from_prefix
        self._namespace = namespace
        self._annotations = annotations or {}
        self._labels = labels or {}

    @property
    def name(self) -> str:
        """Return the name specified."""
        return self._name

    @property
    def generate_name_from_prefix(self) -> bool:
        """Return a flag indicating whether the supplied name should be generated."""
        return self._generate_name_from_prefix

    @property
    def namespace(self) -> Optional[str]:
        """Return the object's namespace, if any."""
        return self._namespace

    @property
    def annotations(self) -> Mapping[str, str]:
        """Return the annotation for the object's metadata."""
        return self._annotations

    @property
    def labels(self) -> Mapping[str, str]:
        """Return the labels for the object's metadata."""
        return self._labels

    def __repr__(self) -> str:
        """Return a human-readable representation of the object."""
        return f"Metadata(name={self._name}, generate_name_from_prefix={self._generate_name_from_prefix}, namespace={self._namespace}, annotations={self._annotations}, labels={self._labels})"

    def __eq__(self, obj) -> bool:
        """Return true if the supplied object is equivalent to the current instance."""
        return (
            isinstance(obj, Metadata)
            and self._name == obj._name
            and self._generate_name_from_prefix == obj._generate_name_from_prefix
            and self._namespace == obj._namespace
            and self._annotations == obj._annotations
            and self._labels == obj._labels
        )


def object_meta(metadata: Metadata) -> Mapping[str, Any]:
    """
    Return a minimal representation of an ObjectMeta with the supplied information.

    Spec: https://github.com/argoproj/argo-workflows/blob/v3.0.4/docs/fields.md#objectmeta
    """
    meta: Dict[str, Any] = {}

    if metadata.generate_name_from_prefix:
        meta["generateName"] = metadata.name
    else:
        meta["name"] = metadata.name

    if metadata.annotations:
        meta["annotations"] = metadata.annotations

    if metadata.labels:
        meta["labels"] = metadata.labels

    if metadata.namespace:
        meta["namespace"] = metadata.namespace

    return meta
