apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: nested-dags-
spec:
  arguments:
    parameters:
    - name: album_name
      value: "big dag"
    - name: style
      value: "hip hop"
  entrypoint: dag
  templates:
  - name: dag
    inputs:
      parameters:
      - name: name
        value: dag
      artifacts:
      - name: album_name
        raw:
          data: '"{{workflow.parameters.album_name}}"'
      - name: style
        raw:
          data: '"{{workflow.parameters.style}}"'
    outputs:
      artifacts:
      - from: '{{tasks.publish-album.outputs.artifacts.album}}'
        name: album
    dag:
      tasks:
      - name: brainstorm-themes
        template: dag-brainstorm-themes
        arguments:
          parameters:
          - name: first_theme_output_path
            value: "{{workflow.uid}}/{{inputs.parameters.name}}/brainstorm-themes/first_theme.json"
          - name: second_theme_output_path
            value: "{{workflow.uid}}/{{inputs.parameters.name}}/brainstorm-themes/second_theme.json"
      - name: record-first-song
        template: dag-record-first-song
        dependencies:
        - brainstorm-themes
        arguments:
          parameters:
          - name: name
            value: "{{inputs.parameters.name}}-record-first-song"
          artifacts:
          - name: style
            from: "{{inputs.artifacts.style}}"
          - name: theme
            s3:
              key: "{{workflow.uid}}/{{inputs.parameters.name}}/brainstorm-themes/first_theme.json"
      - name: record-second-song
        template: dag-record-second-song
        dependencies:
        - brainstorm-themes
        arguments:
          parameters:
          - name: name
            value: "{{inputs.parameters.name}}-record-second-song"
          artifacts:
          - name: style
            from: "{{inputs.artifacts.style}}"
          - name: theme
            s3:
              key: "{{workflow.uid}}/{{inputs.parameters.name}}/brainstorm-themes/second_theme.json"
      - name: publish-album
        template: dag-publish-album
        dependencies:
        - record-first-song
        - record-second-song
        arguments:
          # TODO: Key-only artifacts with artifacts from DAG?
          parameters:
          - name: album_output_path
            value: "{{workflow.uid}}/{{inputs.parameters.name}}/publish-album/album.json"
          artifacts:
          - name: album_name
            from: '{{inputs.artifacts.album_name}}'
          - name: first_song
            from: '{{tasks.record-first-song.outputs.artifacts.song}}'
          - name: second_song
            from: '{{tasks.record-second-song.outputs.artifacts.song}}'

  - name: dag-brainstorm-themes
    inputs:
      parameters:
      - name: first_theme_output_path
      - name: second_theme_output_path
    outputs:
      artifacts:
      - name: first_theme
        path: /tmp/outputs/first_theme.json
        archive:
          none: {}
        s3:
          key: "{{inputs.parameters.first_theme_output_path}}"
      - name: second_theme
        path: /tmp/outputs/second_theme.json
        archive:
          none: {}
        s3:
          key: "{{inputs.parameters.second_theme_output_path}}"
    container:
      args:
      - --node-name
      - brainstorm-themes
      - --output
      - first_theme
      - '{{outputs.artifacts.first_theme.path}}'
      - --output
      - second_theme
      - '{{outputs.artifacts.second_theme.path}}'
      command:
      - nested-dags
      image: local.registry/dagger
      volumeMounts:
      - mountPath: /tmp/outputs/
        name: outputs
    volumes:
    - emptyDir: {}
      name: outputs

  - name: dag-record-first-song
    inputs:
      parameters:
      - name: name
      artifacts:
      - name: theme
      - name: style
    outputs:
      artifacts:
      - name: song
        from: '{{tasks.record.outputs.artifacts.recording}}'
    dag:
      tasks:
      - name: compose
        template: dag-record-first-song-compose
        arguments:
          parameters:
          - name: composition_output_path
            value: "{{workflow.uid}}/{{inputs.parameters.name}}/compose/composition.json"
          artifacts:
          - name: theme
            from: '{{inputs.artifacts.theme}}'
          - name: style
            from: '{{inputs.artifacts.style}}'
      - name: record
        template: dag-record-first-song-record
        dependencies:
        - compose
        arguments:
          parameters:
          - name: recording_output_path
            value: "{{workflow.uid}}/{{inputs.parameters.name}}/record/recording.json"
          artifacts:
          - name: composition
            s3:
              key: "{{workflow.uid}}/{{inputs.parameters.name}}/compose/composition.json"

  - name: dag-record-first-song-compose
    inputs:
      parameters:
      - name: composition_output_path
      artifacts:
      - name: theme
        path: /tmp/inputs/theme.json
      - name: style
        path: /tmp/inputs/style.json
    outputs:
      artifacts:
      - name: composition
        path: /tmp/outputs/composition.json
        archive:
          none: {}
        s3:
          key: "{{inputs.parameters.composition_output_path}}"
    container:
      args:
      - --node-name
      - record-first-song.compose
      - --input
      - theme
      - '{{inputs.artifacts.theme.path}}'
      - --input
      - style
      - '{{inputs.artifacts.style.path}}'
      - --output
      - composition
      - '{{outputs.artifacts.composition.path}}'
      command:
      - nested-dags
      image: local.registry/dagger
      volumeMounts:
      - mountPath: /tmp/outputs/
        name: outputs
    volumes:
    - emptyDir: {}
      name: outputs

  - name: dag-record-first-song-record
    inputs:
      parameters:
      - name: recording_output_path
      artifacts:
      - name: composition
        path: /tmp/inputs/composition.json
    outputs:
      artifacts:
      - name: recording
        archive:
          none: {}
        path: /tmp/outputs/recording.json
        s3:
          key: "{{inputs.parameters.recording_output_path}}"
    container:
      args:
      - --node-name
      - record-first-song.record
      - --input
      - composition
      - '{{inputs.artifacts.composition.path}}'
      - --output
      - recording
      - '{{outputs.artifacts.recording.path}}'
      command:
      - nested-dags
      image: local.registry/dagger
      volumeMounts:
      - mountPath: /tmp/outputs/
        name: outputs
    volumes:
    - emptyDir: {}
      name: outputs

  - name: dag-record-second-song
    inputs:
      parameters:
      - name: name
      artifacts:
      - name: theme
      - name: style
    outputs:
      artifacts:
      - name: song
        from: '{{tasks.record.outputs.artifacts.recording}}'
    dag:
      tasks:
      - name: compose
        template: dag-record-second-song-compose
        arguments:
          parameters:
          - name: composition_output_path
            value: "{{workflow.uid}}/{{inputs.parameters.name}}/compose/composition.json"
          artifacts:
          - name: theme
            from: '{{inputs.artifacts.theme}}'
          - name: style
            from: '{{inputs.artifacts.style}}'
      - name: record
        template: dag-record-second-song-record
        dependencies:
        - compose
        arguments:
          parameters:
          - name: recording_output_path
            value: "{{workflow.uid}}/{{inputs.parameters.name}}/record/recording.json"
          artifacts:
          - name: composition
            s3:
              key: "{{workflow.uid}}/{{inputs.parameters.name}}/compose/composition.json"

  - name: dag-record-second-song-compose
    inputs:
      parameters:
      - name: composition_output_path
      artifacts:
      - name: theme
        path: /tmp/inputs/theme.json
      - name: style
        path: /tmp/inputs/style.json
    outputs:
      artifacts:
      - name: composition
        path: /tmp/outputs/composition.json
        archive:
          none: {}
        s3:
          key: "{{inputs.parameters.composition_output_path}}"
    container:
      args:
      - --node-name
      - record-second-song.compose
      - --input
      - theme
      - '{{inputs.artifacts.theme.path}}'
      - --input
      - style
      - '{{inputs.artifacts.style.path}}'
      - --output
      - composition
      - '{{outputs.artifacts.composition.path}}'
      command:
      - nested-dags
      image: local.registry/dagger
      volumeMounts:
      - mountPath: /tmp/outputs/
        name: outputs
    volumes:
    - emptyDir: {}
      name: outputs

  - name: dag-record-second-song-record
    inputs:
      parameters:
      - name: recording_output_path
      artifacts:
      - name: composition
        path: /tmp/inputs/composition.json
    outputs:
      artifacts:
      - name: recording
        archive:
          none: {}
        path: /tmp/outputs/recording.json
        s3:
          key: "{{inputs.parameters.recording_output_path}}"
    container:
      args:
      - --node-name
      - record-second-song.record
      - --input
      - composition
      - '{{inputs.artifacts.composition.path}}'
      - --output
      - recording
      - '{{outputs.artifacts.recording.path}}'
      command:
      - nested-dags
      image: local.registry/dagger
      volumeMounts:
      - mountPath: /tmp/outputs/
        name: outputs
    volumes:
    - emptyDir: {}
      name: outputs

  - name: dag-publish-album
    inputs:
      parameters:
      - name: album_output_path
      artifacts:
      - name: album_name
        path: /tmp/inputs/album_name.json
      - name: first_song
        path: /tmp/inputs/first_song.json
      - name: second_song
        path: /tmp/inputs/second_song.json
    outputs:
      artifacts:
      - name: album
        path: /tmp/outputs/album.json
        archive:
          none: {}
        s3:
          key: "{{inputs.parameters.album_output_path}}"
    container:
      args:
      - --node-name
      - publish-album
      - --input
      - album_name
      - '{{inputs.artifacts.album_name.path}}'
      - --input
      - first_song
      - '{{inputs.artifacts.first_song.path}}'
      - --input
      - second_song
      - '{{inputs.artifacts.second_song.path}}'
      - --output
      - album
      - '{{outputs.artifacts.album.path}}'
      command:
      - nested-dags
      image: local.registry/dagger
      volumeMounts:
      - mountPath: /tmp/outputs/
        name: outputs
    volumes:
    - emptyDir: {}
      name: outputs
