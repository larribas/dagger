apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: key-only-artifacts-
spec:
  entrypoint: main
  templates:
    - name: main
      outputs:
        artifacts:
        - name: result
          from: "{{tasks.map.outputs.artifacts.number}}"
      dag:
        tasks:
          - name: generate
            template: generate
            arguments:
              parameters:
              - name: numbers_output_path
                value: "{{workflow.uid}}/generate/numbers.json"
          - name: map
            template: map
            dependencies:
              - generate
            arguments:
              parameters:
              - name: number_output_path
                value: "{{workflow.uid}}/map/number.json/{{item}}"
              artifacts:
              - name: number
                s3:
                  key: "{{workflow.uid}}/generate/numbers.json/{{item}}"
            withParam: "{{tasks.generate.outputs.parameters.partitions}}"
          - name: reduce
            template: reduce
            dependencies:
            - map
            arguments:
              parameters:
              - name: number_output_path
                value: "{{workflow.uid}}/reduce/number.json"
              artifacts:
              - name: numbers
                s3:
                  key: "{{workflow.uid}}/map/number.json"
    - name: generate
      inputs:
        parameters:
        - name: numbers_output_path
      outputs:
        artifacts:
        - name: numbers
          path: /tmp/outputs/numbers.json
          archive:
            none: { }
          s3:
            key: "{{inputs.parameters.numbers_output_path}}"
        parameters:
        - name: partitions
          valueFrom:
            path: "{{outputs.artifacts.numbers.path}}/partitions.json"
      script:
        image: python:alpine3.6
        command: [python]
        source: |
          import os
          os.mkdir("/tmp/outputs/numbers.json")

          import random
          partitions = [i+4 for i in list(range(random.randint(3,5)))]
          for i in partitions:
            with open(f"/tmp/outputs/numbers.json/{i}", "w") as f:
              f.write(str(i))

          import json
          with open("/tmp/outputs/numbers.json/partitions.json", "w") as f:
            f.write(json.dumps(partitions))

          import glob
          print(glob.glob("/tmp/outputs/numbers.json/*"))
        volumeMounts:
        - mountPath: /tmp/outputs/
          name: outputs
      volumes:
      - emptyDir: {}
        name: outputs

    - name: map
      inputs:
        parameters:
        - name: number_output_path
        artifacts:
        - name: number
          path: /tmp/inputs/number.json
      outputs:
        artifacts:
        - name: number
          path: /tmp/outputs/number.json
          archive:
            none: { }
          s3:
            key: "{{inputs.parameters.number_output_path}}"
        parameters:
        - name: partitions
          valueFrom:
            path: "{{outputs.artifacts.number.path}}"
      script:
        image: python:alpine3.6
        command: [python]
        source: |
          import json
          with open("/tmp/inputs/number.json", "r") as f:
            n = json.loads(f.read())

          with open("/tmp/outputs/number.json", "w") as f:
            f.write(json.dumps(n * 2))
        volumeMounts:
        - mountPath: /tmp/outputs/
          name: outputs
      volumes:
      - emptyDir: {}
        name: outputs


    - name: reduce
      inputs:
        parameters:
        - name: number_output_path
        artifacts:
        - name: numbers
          path: /tmp/inputs/numbers.json
      outputs:
        artifacts:
        - name: number
          path: /tmp/outputs/number.json
          archive:
            none: { }
          s3:
            key: "{{inputs.parameters.number_output_path}}"
      script:
        image: python:alpine3.6
        command: [python]
        source: |
          import glob
          print(glob.glob("/tmp/inputs/numbers.json"))

          import json
          numbers = []
          for path in glob.glob("/tmp/inputs/numbers.json/*"):
            with open(path, "r") as f:
              numbers.append(json.loads(f.read()))

          print(numbers)

          with open("/tmp/outputs/number.json", "w") as f:
            f.write(json.dumps(sum(numbers)))

        volumeMounts:
        - mountPath: /tmp/outputs/
          name: outputs
      volumes:
      - emptyDir: {}
        name: outputs
